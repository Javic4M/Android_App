
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.graficasapp.analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoKoltlin extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoKoltlin() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoKoltlin(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoKoltlin(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\056\000\002\003" +
    "\005\000\002\003\003\000\002\004\011\000\002\004\012" +
    "\000\002\004\011\000\002\004\016\000\002\004\015\000" +
    "\002\004\020\000\002\004\017\000\002\004\015\000\002" +
    "\004\014\000\002\004\010\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\023\003\000" +
    "\002\023\003\000\002\005\015\000\002\005\014\000\002" +
    "\005\021\000\002\005\022\000\002\005\015\000\002\005" +
    "\014\000\002\005\021\000\002\005\022\000\002\005\015" +
    "\000\002\005\014\000\002\005\025\000\002\005\025\000" +
    "\002\005\005\000\002\006\017\000\002\006\016\000\002" +
    "\006\021\000\002\006\020\000\002\007\015\000\002\007" +
    "\014\000\002\010\021\000\002\010\022\000\002\011\015" +
    "\000\002\011\014\000\002\012\021\000\002\012\022\000" +
    "\002\013\015\000\002\014\015\000\002\014\014\000\002" +
    "\015\025\000\002\015\026\000\002\016\021\000\002\017" +
    "\015\000\002\017\013\000\002\020\021\000\002\020\017" +
    "\000\002\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\004\004\004\001\002\000\004\014\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\064\011\001\002\000" +
    "\004\011\012\001\002\000\004\015\013\001\002\000\004" +
    "\010\014\001\002\000\004\064\015\001\002\000\004\011" +
    "\016\001\002\000\004\016\017\001\002\000\004\010\020" +
    "\001\002\000\004\006\021\001\002\000\004\064\022\001" +
    "\002\000\006\007\ufffe\011\u0172\001\002\000\004\007\024" +
    "\001\002\000\004\011\025\001\002\000\004\017\026\001" +
    "\002\000\004\010\027\001\002\000\004\004\030\001\002" +
    "\000\004\014\031\001\002\000\004\010\032\001\002\000" +
    "\004\064\033\001\002\000\004\005\034\001\002\000\004" +
    "\011\035\001\002\000\004\020\036\001\002\000\004\010" +
    "\037\001\002\000\004\004\040\001\002\000\004\021\041" +
    "\001\002\000\004\010\042\001\002\000\004\064\043\001" +
    "\002\000\004\005\044\001\002\000\004\011\045\001\002" +
    "\000\004\022\046\001\002\000\004\010\047\001\002\000" +
    "\004\062\050\001\002\000\004\011\051\001\002\000\004" +
    "\023\052\001\002\000\004\010\053\001\002\000\004\064" +
    "\054\001\002\000\004\011\055\001\002\000\004\024\056" +
    "\001\002\000\004\010\057\001\002\000\004\061\060\001" +
    "\002\000\012\004\061\042\065\044\062\045\064\001\002" +
    "\000\004\012\153\001\002\000\004\046\136\001\002\000" +
    "\004\005\135\001\002\000\004\046\123\001\002\000\004" +
    "\046\066\001\002\000\006\065\071\066\067\001\002\000" +
    "\024\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\060\uffeb\001\002\000\004\047\111\001" +
    "\002\000\024\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\060\uffec\001\002\000\020\050" +
    "\073\051\075\052\074\053\077\054\101\055\076\056\100" +
    "\001\002\000\006\065\071\066\067\001\002\000\006\065" +
    "\071\066\067\001\002\000\006\065\071\066\067\001\002" +
    "\000\006\065\071\066\067\001\002\000\006\065\071\066" +
    "\067\001\002\000\006\065\071\066\067\001\002\000\006" +
    "\065\071\066\067\001\002\000\006\047\uffee\060\uffee\001" +
    "\002\000\006\047\uffed\060\uffed\001\002\000\006\047\ufff0" +
    "\060\ufff0\001\002\000\006\047\uffef\060\uffef\001\002\000" +
    "\006\047\ufff1\060\ufff1\001\002\000\006\047\ufff3\060\ufff3" +
    "\001\002\000\006\047\ufff2\060\ufff2\001\002\000\004\004" +
    "\112\001\002\000\012\004\061\042\065\044\062\045\064" +
    "\001\002\000\004\005\114\001\002\000\020\004\061\005" +
    "\ufffb\042\065\043\115\044\062\045\064\065\ufffb\001\002" +
    "\000\004\004\117\001\002\000\006\005\ufffc\065\ufffc\001" +
    "\002\000\012\004\061\042\065\044\062\045\064\001\002" +
    "\000\004\005\121\001\002\000\016\004\061\005\ufff9\042" +
    "\065\044\062\045\064\065\ufff9\001\002\000\006\005\ufffa" +
    "\065\ufffa\001\002\000\006\065\071\066\067\001\002\000" +
    "\004\047\125\001\002\000\004\004\126\001\002\000\012" +
    "\004\061\042\065\044\062\045\064\001\002\000\004\065" +
    "\130\001\002\000\004\057\131\001\002\000\004\057\132" +
    "\001\002\000\004\005\133\001\002\000\016\004\061\005" +
    "\ufff5\042\065\044\062\045\064\065\ufff5\001\002\000\006" +
    "\005\ufff6\065\ufff6\001\002\000\004\002\000\001\002\000" +
    "\006\065\071\066\067\001\002\000\004\060\140\001\002" +
    "\000\006\065\071\066\067\001\002\000\004\060\142\001" +
    "\002\000\004\065\143\001\002\000\004\057\144\001\002" +
    "\000\004\057\145\001\002\000\004\047\146\001\002\000" +
    "\004\004\147\001\002\000\012\004\061\042\065\044\062" +
    "\045\064\001\002\000\004\005\151\001\002\000\016\004" +
    "\061\005\ufff7\042\065\044\062\045\064\065\ufff7\001\002" +
    "\000\006\005\ufff8\065\ufff8\001\002\000\004\010\154\001" +
    "\002\000\004\006\155\001\002\000\004\004\156\001\002" +
    "\000\012\027\164\030\162\032\165\036\163\001\002\000" +
    "\004\005\160\001\002\000\016\004\061\005\ufff4\042\065" +
    "\044\062\045\064\065\ufff4\001\002\000\006\005\ufffd\065" +
    "\ufffd\001\002\000\004\010\u0135\001\002\000\004\010\360" +
    "\001\002\000\004\010\275\001\002\000\004\010\166\001" +
    "\002\000\004\066\167\001\002\000\004\011\170\001\002" +
    "\000\004\033\171\001\002\000\004\010\172\001\002\000" +
    "\004\066\173\001\002\000\006\005\175\011\174\001\002" +
    "\000\004\031\215\001\002\000\006\007\177\011\176\001" +
    "\002\000\004\004\200\001\002\000\004\005\uffe1\001\002" +
    "\000\004\032\202\001\002\000\004\005\uffe2\001\002\000" +
    "\004\010\203\001\002\000\004\066\204\001\002\000\004" +
    "\011\205\001\002\000\004\033\206\001\002\000\004\010" +
    "\207\001\002\000\004\066\210\001\002\000\004\005\211" +
    "\001\002\000\006\007\213\011\212\001\002\000\004\004" +
    "\200\001\002\000\004\005\uffcf\001\002\000\004\005\uffd0" +
    "\001\002\000\004\010\216\001\002\000\004\066\217\001" +
    "\002\000\004\011\220\001\002\000\004\035\221\001\002" +
    "\000\004\010\222\001\002\000\004\062\223\001\002\000" +
    "\004\005\224\001\002\000\004\011\225\001\002\000\006" +
    "\004\226\013\230\001\002\000\004\032\250\001\002\000" +
    "\004\005\uffdf\001\002\000\004\010\232\001\002\000\004" +
    "\005\uffe0\001\002\000\004\004\233\001\002\000\004\014" +
    "\234\001\002\000\004\010\235\001\002\000\004\064\236" +
    "\001\002\000\004\011\237\001\002\000\004\025\240\001" +
    "\002\000\004\010\241\001\002\000\004\064\242\001\002" +
    "\000\004\011\243\001\002\000\004\026\244\001\002\000" +
    "\004\010\245\001\002\000\004\064\246\001\002\000\004" +
    "\005\247\001\002\000\004\005\uffcc\001\002\000\004\010" +
    "\251\001\002\000\004\066\252\001\002\000\004\011\253" +
    "\001\002\000\004\033\254\001\002\000\004\010\255\001" +
    "\002\000\004\066\256\001\002\000\004\011\257\001\002" +
    "\000\004\031\260\001\002\000\004\010\261\001\002\000" +
    "\004\066\262\001\002\000\004\011\263\001\002\000\004" +
    "\035\264\001\002\000\004\010\265\001\002\000\004\062" +
    "\266\001\002\000\004\005\267\001\002\000\006\007\271" +
    "\011\270\001\002\000\004\004\226\001\002\000\004\011" +
    "\272\001\002\000\004\013\230\001\002\000\004\005\uffcd" +
    "\001\002\000\004\005\uffce\001\002\000\004\063\276\001" +
    "\002\000\004\011\277\001\002\000\004\034\300\001\002" +
    "\000\004\010\301\001\002\000\004\066\302\001\002\000" +
    "\006\005\304\011\303\001\002\000\004\035\324\001\002" +
    "\000\006\007\306\011\305\001\002\000\004\004\310\001" +
    "\002\000\004\005\uffe9\001\002\000\004\005\uffea\001\002" +
    "\000\004\027\311\001\002\000\004\010\312\001\002\000" +
    "\004\063\313\001\002\000\004\011\314\001\002\000\004" +
    "\034\315\001\002\000\004\010\316\001\002\000\004\066" +
    "\317\001\002\000\004\005\320\001\002\000\006\007\322" +
    "\011\321\001\002\000\004\004\310\001\002\000\004\005" +
    "\uffd8\001\002\000\004\005\uffd9\001\002\000\004\010\325" +
    "\001\002\000\004\062\326\001\002\000\004\005\327\001" +
    "\002\000\006\007\331\011\330\001\002\000\004\004\334" +
    "\001\002\000\004\011\332\001\002\000\004\013\230\001" +
    "\002\000\004\005\uffe7\001\002\000\004\027\336\001\002" +
    "\000\004\005\uffe8\001\002\000\004\010\337\001\002\000" +
    "\004\063\340\001\002\000\004\011\341\001\002\000\004" +
    "\034\342\001\002\000\004\010\343\001\002\000\004\066" +
    "\344\001\002\000\004\011\345\001\002\000\004\035\346" +
    "\001\002\000\004\010\347\001\002\000\004\062\350\001" +
    "\002\000\004\005\351\001\002\000\006\007\353\011\352" +
    "\001\002\000\004\004\334\001\002\000\004\011\354\001" +
    "\002\000\004\013\230\001\002\000\004\005\uffd6\001\002" +
    "\000\004\005\uffd7\001\002\000\004\005\uffde\001\002\000" +
    "\004\064\361\001\002\000\004\011\362\001\002\000\004" +
    "\037\363\001\002\000\004\010\364\001\002\000\004\006" +
    "\365\001\002\000\004\004\366\001\002\000\004\032\u0114" +
    "\001\002\000\004\007\u0102\001\002\000\004\007\371\001" +
    "\002\000\004\005\372\001\002\000\006\007\374\011\373" +
    "\001\002\000\004\004\377\001\002\000\004\011\375\001" +
    "\002\000\004\013\230\001\002\000\004\005\uffdc\001\002" +
    "\000\004\036\u0100\001\002\000\004\010\360\001\002\000" +
    "\004\005\uffdd\001\002\000\004\011\u0103\001\002\000\004" +
    "\035\u0104\001\002\000\004\010\u010e\001\002\000\004\005" +
    "\u0106\001\002\000\006\007\u0108\011\u0107\001\002\000\004" +
    "\004\u010b\001\002\000\004\011\u0109\001\002\000\004\013" +
    "\230\001\002\000\004\005\uffda\001\002\000\004\036\u010c" +
    "\001\002\000\004\010\360\001\002\000\004\005\uffdb\001" +
    "\002\000\004\062\u010f\001\002\000\004\011\u0110\001\002" +
    "\000\004\041\u0111\001\002\000\004\010\u0112\001\002\000" +
    "\004\064\u0113\001\002\000\004\005\uffc7\001\002\000\004" +
    "\010\u0115\001\002\000\004\066\u0116\001\002\000\004\011" +
    "\u0117\001\002\000\004\033\u0118\001\002\000\004\010\u0119" +
    "\001\002\000\004\066\u011a\001\002\000\006\005\u011c\011" +
    "\u011b\001\002\000\004\030\u0127\001\002\000\006\007\uffca" +
    "\011\u011d\001\002\000\004\004\u011e\001\002\000\004\032" +
    "\u0120\001\002\000\004\007\uffcb\001\002\000\004\010\u0121" +
    "\001\002\000\004\066\u0122\001\002\000\004\011\u0123\001" +
    "\002\000\004\033\u0124\001\002\000\004\010\u0125\001\002" +
    "\000\004\066\u0126\001\002\000\004\005\u011c\001\002\000" +
    "\004\010\u0128\001\002\000\004\064\u0129\001\002\000\004" +
    "\005\u012a\001\002\000\006\007\uffc8\011\u012b\001\002\000" +
    "\004\004\u012c\001\002\000\004\032\u012e\001\002\000\004" +
    "\007\uffc9\001\002\000\004\010\u012f\001\002\000\004\066" +
    "\u0130\001\002\000\004\011\u0131\001\002\000\004\033\u0132" +
    "\001\002\000\004\010\u0133\001\002\000\004\066\u0134\001" +
    "\002\000\004\011\u011b\001\002\000\004\063\u0136\001\002" +
    "\000\004\011\u0137\001\002\000\004\034\u0138\001\002\000" +
    "\004\010\u0139\001\002\000\004\066\u013a\001\002\000\006" +
    "\005\u013c\011\u013b\001\002\000\004\035\u014c\001\002\000" +
    "\006\007\u013e\011\u013d\001\002\000\004\004\u0140\001\002" +
    "\000\004\005\uffe5\001\002\000\004\005\uffe6\001\002\000" +
    "\004\030\u0141\001\002\000\004\010\u0142\001\002\000\004" +
    "\063\u0143\001\002\000\004\011\u0144\001\002\000\004\034" +
    "\u0145\001\002\000\004\010\u0146\001\002\000\004\066\u0147" +
    "\001\002\000\004\005\u0148\001\002\000\006\007\u014a\011" +
    "\u0149\001\002\000\004\004\u0140\001\002\000\004\005\uffd4" +
    "\001\002\000\004\005\uffd5\001\002\000\004\010\u014d\001" +
    "\002\000\004\062\u014e\001\002\000\004\005\u014f\001\002" +
    "\000\006\007\u0151\011\u0150\001\002\000\004\004\u015f\001" +
    "\002\000\004\011\u0152\001\002\000\004\013\u0154\001\002" +
    "\000\004\005\uffe3\001\002\000\004\010\u0155\001\002\000" +
    "\004\004\u0156\001\002\000\004\014\u0157\001\002\000\004" +
    "\010\u0158\001\002\000\004\064\u0159\001\002\000\004\011" +
    "\u015a\001\002\000\004\040\u015b\001\002\000\004\010\u015c" +
    "\001\002\000\004\064\u015d\001\002\000\004\005\u015e\001" +
    "\002\000\004\005\uffd1\001\002\000\004\030\u0161\001\002" +
    "\000\004\005\uffe4\001\002\000\004\010\u0162\001\002\000" +
    "\004\063\u0163\001\002\000\004\011\u0164\001\002\000\004" +
    "\034\u0165\001\002\000\004\010\u0166\001\002\000\004\066" +
    "\u0167\001\002\000\004\011\u0168\001\002\000\004\035\u0169" +
    "\001\002\000\004\010\u016a\001\002\000\004\062\u016b\001" +
    "\002\000\004\005\u016c\001\002\000\006\007\u016e\011\u016d" +
    "\001\002\000\004\004\u015f\001\002\000\004\011\u016f\001" +
    "\002\000\004\013\u0154\001\002\000\004\005\uffd2\001\002" +
    "\000\004\005\uffd3\001\002\000\004\064\022\001\002\000" +
    "\004\007\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\067\023\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\107\001\001\000\004\023\106\001" +
    "\001\000\004\023\105\001\001\000\004\023\104\001\001" +
    "\000\004\023\103\001\001\000\004\023\102\001\001\000" +
    "\004\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\112\001\001\000\002\001\001\000\004\004\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\117" +
    "\001\001\000\002\001\001\000\004\004\121\001\001\000" +
    "\002\001\001\000\006\022\123\023\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\136\023\071\001\001\000\002" +
    "\001\001\000\006\022\140\023\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\147\001" +
    "\001\000\002\001\001\000\004\004\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\230\016\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\273\001\001\000\002\001\001\000\004\016\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\334\001\001\000\002" +
    "\001\001\000\004\016\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\355\001\001\000\002\001\001" +
    "\000\004\016\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\367\020\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u011e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u013e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u014a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u015f\001" +
    "\001\000\002\001\001\000\004\013\u0152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0170\001\001\000\002\001\001\000\004\013\u016f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0172" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoKoltlin$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoKoltlin$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoKoltlin$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Symbol symbol;
    private String contenido;

    public SintacticoKoltlin(LexicoKoltlin lexico) {
        super(lexico);
    }

    public void syntax_error(Symbol cur_token) {
        symbol = cur_token;
        contenido = (String)(cur_token.value);
    }

    public Symbol getSymbol() {
        return this.symbol;
    }

    public String getContenido() {
        return this.contenido;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoKoltlin$actions {
  private final SintacticoKoltlin parser;

  /** Constructor */
  CUP$SintacticoKoltlin$actions(SintacticoKoltlin parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoKoltlin$do_action_part00000000(
    int                        CUP$SintacticoKoltlin$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoKoltlin$parser,
    java.util.Stack            CUP$SintacticoKoltlin$stack,
    int                        CUP$SintacticoKoltlin$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoKoltlin$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoKoltlin$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoKoltlin$parser.done_parsing();
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAVE_I TITULO DOS_PUNTOS PALABRA COMA DESCRIPCION DOS_PUNTOS PALABRA COMA PALABRA_CLAVE DOS_PUNTOS CORCHETE_I claves CORCHETE_D COMA ENCABEZADO DOS_PUNTOS LLAVE_I TITULO DOS_PUNTOS PALABRA LLAVE_D COMA PIE DOS_PUNTOS LLAVE_I COPYRIGHT DOS_PUNTOS PALABRA LLAVE_D COMA FONDO DOS_PUNTOS NUMERO_COLOR COMA FUENTE DOS_PUNTOS PALABRA COMA TAMANIO_FUENTE DOS_PUNTOS PIXEL iniciodata LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-43)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // claves ::= PALABRA COMA claves 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("claves",1, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // claves ::= PALABRA 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("claves",1, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // iniciodata ::= LLAVE_I DATA DOS_PUNTOS CORCHETE_I interior1 LLAVE_D iniciodata 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // iniciodata ::= IF PARENTESIS_I complemento PARENTESIS_D LLAVE_I iniciodata LLAVE_D iniciodata 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // iniciodata ::= IF PARENTESIS_I complemento PARENTESIS_D LLAVE_I iniciodata LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // iniciodata ::= IF PARENTESIS_I complemento PARENTESIS_D LLAVE_I iniciodata LLAVE_D ELSE LLAVE_I iniciodata LLAVE_D iniciodata 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // iniciodata ::= IF PARENTESIS_I complemento PARENTESIS_D LLAVE_I iniciodata LLAVE_D ELSE LLAVE_I iniciodata LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // iniciodata ::= FOR PARENTESIS_I complemento PUNTO_Y_COMA complemento PUNTO_Y_COMA IDENTIFICADOR MAS MAS PARENTESIS_D LLAVE_I iniciodata LLAVE_D iniciodata 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iniciodata ::= FOR PARENTESIS_I complemento PUNTO_Y_COMA complemento PUNTO_Y_COMA IDENTIFICADOR MAS MAS PARENTESIS_D LLAVE_I iniciodata LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iniciodata ::= WHILE PARENTESIS_I complemento PARENTESIS_D LLAVE_I iniciodata IDENTIFICADOR MAS MAS LLAVE_D iniciodata 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // iniciodata ::= WHILE PARENTESIS_I complemento PARENTESIS_D LLAVE_I iniciodata IDENTIFICADOR MAS MAS LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // iniciodata ::= LLAVE_I DATA DOS_PUNTOS CORCHETE_I interior1 LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("iniciodata",2, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // complemento ::= identificador IGUAL identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // complemento ::= identificador DOBLE_IGUAL identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // complemento ::= identificador NO_IGUAL identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // complemento ::= identificador MAYOR identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // complemento ::= identificador MENOR identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // complemento ::= identificador MAYOR_IGUAL identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // complemento ::= identificador MENOR_IGUAL identificador 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("complemento",16, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("identificador",17, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // identificador ::= NUMERO 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("identificador",17, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // interior1 ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D COMA simplebarra 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // interior1 ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // interior1 ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA expandidobarra 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // interior1 ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D CORCHETE_D COMA extra1 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // interior1 ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D COMA simplepastel 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // interior1 ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // interior1 ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA expandidopastel 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // interior1 ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D CORCHETE_D COMA extra2 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // interior1 ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO LLAVE_D COMA simplepunto 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // interior1 ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO LLAVE_D CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // interior1 ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO COMA TAMANIO DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA expandidopunto 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // interior1 ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO COMA TAMANIO DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA extra1 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // interior1 ::= LLAVE_I NOMBRE interior2 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior1",3, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // interior2 ::= DOS_PUNTOS PALABRA COMA PUNTOS DOS_PUNTOS CORCHETE_I simplelinea CORCHETE_D LLAVE_D COMA LLAVE_I NOMBRE interior2 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior2",4, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // interior2 ::= DOS_PUNTOS PALABRA COMA PUNTOS DOS_PUNTOS CORCHETE_I simplelinea CORCHETE_D LLAVE_D CORCHETE_D COMA extra1 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior2",4, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // interior2 ::= DOS_PUNTOS PALABRA COMA PUNTOS DOS_PUNTOS CORCHETE_I expandidolinea CORCHETE_D COMA extra3 LLAVE_D COMA LLAVE_I NOMBRE interior2 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior2",4, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // interior2 ::= DOS_PUNTOS PALABRA COMA PUNTOS DOS_PUNTOS CORCHETE_I expandidolinea CORCHETE_D COMA extra3 LLAVE_D CORCHETE_D COMA extra1 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("interior2",4, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simplebarra ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D COMA simplebarra 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplebarra",5, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simplebarra ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplebarra",5, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expandidobarra ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA expandidobarra 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidobarra",6, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expandidobarra ::= LLAVE_I CATEGORIA DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D CORCHETE_D COMA extra1 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidobarra",6, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simplepastel ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D COMA simplepastel 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplepastel",7, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simplepastel ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO LLAVE_D CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplepastel",7, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expandidopastel ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA expandidopastel 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidopastel",8, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expandidopastel ::= LLAVE_I LABEL DOS_PUNTOS TIPO COMA VALOR DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D CORCHETE_D COMA extra2 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidopastel",8, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // extra2 ::= CHART DOS_PUNTOS LLAVE_I TITULO DOS_PUNTOS PALABRA COMA POSICION DOS_PUNTOS PALABRA LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("extra2",9, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simplepunto ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO LLAVE_D COMA simplepunto 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplepunto",10, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simplepunto ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO LLAVE_D CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplepunto",10, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expandidopunto ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO COMA TAMANIO DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D COMA expandidopunto 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidopunto",11, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expandidopunto ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO COMA TAMANIO DOS_PUNTOS NUMERO COMA COLOR DOS_PUNTOS NUMERO_COLOR LLAVE_D CORCHETE_D COMA extra1 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidopunto",11, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-19)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // extra1 ::= CHART DOS_PUNTOS LLAVE_I TITULO DOS_PUNTOS PALABRA COMA X_BARRA DOS_PUNTOS PALABRA COMA Y_BARRA DOS_PUNTOS PALABRA LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("extra1",12, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simplelinea ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO LLAVE_D COMA simplelinea 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplelinea",13, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simplelinea ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("simplelinea",13, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expandidolinea ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO COMA LABEL DOS_PUNTOS PALABRA LLAVE_D COMA expandidolinea 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidolinea",14, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expandidolinea ::= LLAVE_I X DOS_PUNTOS NUMERO COMA Y DOS_PUNTOS NUMERO COMA LABEL DOS_PUNTOS PALABRA LLAVE_D 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("expandidolinea",14, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // extra3 ::= COLOR DOS_PUNTOS NUMERO_COLOR COMA LINEA_ESTILO DOS_PUNTOS PALABRA 
            {
              Object RESULT =null;

              CUP$SintacticoKoltlin$result = parser.getSymbolFactory().newSymbol("extra3",15, ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.elementAt(CUP$SintacticoKoltlin$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoKoltlin$stack.peek()), RESULT);
            }
          return CUP$SintacticoKoltlin$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoKoltlin$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoKoltlin$do_action(
    int                        CUP$SintacticoKoltlin$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoKoltlin$parser,
    java.util.Stack            CUP$SintacticoKoltlin$stack,
    int                        CUP$SintacticoKoltlin$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoKoltlin$do_action_part00000000(
                               CUP$SintacticoKoltlin$act_num,
                               CUP$SintacticoKoltlin$parser,
                               CUP$SintacticoKoltlin$stack,
                               CUP$SintacticoKoltlin$top);
    }
}

}
